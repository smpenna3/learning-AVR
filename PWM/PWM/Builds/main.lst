   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 101               		.section	.text.startup,"ax",@progbits
 103               	.global	main
 105               	main:
   1:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** /* included header files - necessary for functions and defined pins */
   2:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** #include <avr/io.h>
   3:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** #include <avr/interrupt.h>
   4:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** #include <util/delay.h>
   5:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** 
   6:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** void pwm_init(void);
   7:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** 
   8:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** 
   9:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** int main(void)
  10:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** {
 107               	.LM0:
 108               	.LFBB1:
 109               	/* prologue: function */
 110               	/* frame size = 0 */
 111               	/* stack size = 0 */
 112               	.L__stack_usage = 0
  11:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     //Initialize PWM
  12:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     //pwm_init();
  13:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     
  14:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     // OC0A is tied to pin PD6 (pin 12 on 328 chip)
  15:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     // OC0B is tied to pin PD5 (pin 11 on 328 chip)
  16:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     // OC2B is tied to pin PD3 (pin 5 on 328 chip)
  17:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     // Set all three pins to output
  18:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD3);
 114               	.LM1:
 115 0000 8AB1      		in r24,0xa
 116 0002 8866      		ori r24,lo8(104)
 117 0004 8AB9      		out 0xa,r24
  19:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     
  20:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     // Start all color channels off
  21:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     OCR0A = 255;
 119               	.LM2:
 120 0006 8FEF      		ldi r24,lo8(-1)
 121 0008 87BD      		out 0x27,r24
  22:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     OCR0B = 255;
 123               	.LM3:
 124 000a 88BD      		out 0x28,r24
  23:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     OCR2B = 255;
 126               	.LM4:
 127 000c 8093 B400 		sts 180,r24
 128               	.L2:
  24:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     
  25:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     int delay_amount = 20; // milliseconds to delay between changing PWM values
  26:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     
  27:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     while(1)
  28:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     {
  29:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         
  30:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         PORTD |= (1 << PD6);
 130               	.LM5:
 131 0010 5E9A      		sbi 0xb,6
 132               	.LBB6:
 133               	.LBB7:
 135               	.Ltext1:
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 137               	.LM6:
 138 0012 89EF      		ldi r24,lo8(249)
 139 0014 90E0      		ldi r25,hi8(249)
 140 0016 0197      		1: sbiw r24,1
 141 0018 01F4      		brne 1b
 142 001a 00C0      		rjmp .
 143 001c 0000      		nop
 144               	.LBE7:
 145               	.LBE6:
 147               	.Ltext2:
  31:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         _delay_ms(1);
  32:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         PORTD &= ~(1 << PD6);
 149               	.LM7:
 150 001e 5E98      		cbi 0xb,6
 151               	.LBB8:
 152               	.LBB9:
 154               	.Ltext3:
 156               	.LM8:
 157 0020 89EC      		ldi r24,lo8(2249)
 158 0022 98E0      		ldi r25,hi8(2249)
 159 0024 0197      		1: sbiw r24,1
 160 0026 01F4      		brne 1b
 161 0028 00C0      		rjmp .
 162 002a 0000      		nop
 163 002c 00C0      		rjmp .L2
 164               	.LBE9:
 165               	.LBE8:
 167               	.Lscope1:
 168               		.text
 170               	.global	pwm_init
 172               	pwm_init:
 174               	.Ltext4:
  33:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         _delay_ms(9);
  34:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         /*
  35:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         // fade green up
  36:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         for (int i = 0; i < 256; i++)
  37:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         {
  38:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****             OCR0A = (255-i);
  39:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****             _delay_ms(delay_amount);
  40:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         }
  41:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         // fade green down
  42:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         for (int j = 255; j >= 0; j--)
  43:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         {
  44:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****             OCR0A = (255-j);
  45:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****             _delay_ms(delay_amount);
  46:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         }
  47:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****          */
  48:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         
  49:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         /*
  50:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         //fade blue up
  51:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         for (int i = 0; i < 256; i++)
  52:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         {
  53:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****             OCR0B = (255-i);
  54:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****             _delay_ms(delay_amount);
  55:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         }
  56:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         // fade blue down
  57:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         for (int j = 255; j >= 0; j--)
  58:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         {
  59:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****             OCR0B = (255-j);
  60:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****             _delay_ms(delay_amount);
  61:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         }
  62:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         
  63:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         //fade red up
  64:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         for (int i = 0; i < 256; i++)
  65:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         {
  66:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****             OCR2B = (255-i);
  67:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****             _delay_ms(delay_amount);
  68:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         }
  69:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         // fade red down
  70:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         for (int j = 255; j >= 0; j--)
  71:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         {
  72:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****             OCR2B = (255-j);
  73:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****             _delay_ms(delay_amount);
  74:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         }
  75:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****          */
  76:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****         
  77:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     }
  78:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** 
  79:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** }
  80:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** 
  81:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** // Initialize PWM: set the mode for timers, configure settings
  82:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** void pwm_init(void)
  83:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c **** {
 176               	.LM9:
 177               	.LFBB2:
 178               	/* prologue: function */
 179               	/* frame size = 0 */
 180               	/* stack size = 0 */
 181               	.L__stack_usage = 0
  84:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     // Fast PWM mode for timers 0 and 2 (p.106)
  85:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     TCCR0A |= (1 << WGM01) | (1 << WGM00);
 183               	.LM10:
 184 0000 84B5      		in r24,0x24
 185 0002 8360      		ori r24,lo8(3)
 186 0004 84BD      		out 0x24,r24
  86:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     TCCR2A |= (1 << WGM21) | (1 << WGM20);
 188               	.LM11:
 189 0006 E0EB      		ldi r30,lo8(-80)
 190 0008 F0E0      		ldi r31,0
 191 000a 8081      		ld r24,Z
 192 000c 8360      		ori r24,lo8(3)
 193 000e 8083      		st Z,r24
  87:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     
  88:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     // clear OC0A on compare match, set on BOTTOM (inverting) (p.104)
  89:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     // 255 is fully off, 0 is fully on
  90:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     TCCR0A |= (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0); // set for A0 & B0
 195               	.LM12:
 196 0010 84B5      		in r24,0x24
 197 0012 806F      		ori r24,lo8(-16)
 198 0014 84BD      		out 0x24,r24
  91:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     TCCR2A |= (1 << COM2B1) | (1 << COM2B0);
 200               	.LM13:
 201 0016 8081      		ld r24,Z
 202 0018 8063      		ori r24,lo8(48)
 203 001a 8083      		st Z,r24
  92:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     
  93:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     // Use clock directly, no prescaler (p.107)
  94:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     TCCR0B |= (0 << CS02) | (0 << CS01) | (1 << CS00);
 205               	.LM14:
 206 001c 85B5      		in r24,0x25
 207 001e 8160      		ori r24,lo8(1)
 208 0020 85BD      		out 0x25,r24
  95:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     TCCR2B |= (0 << CS22) | (0 << CS21) | (1 << CS20);
 210               	.LM15:
 211 0022 E1EB      		ldi r30,lo8(-79)
 212 0024 F0E0      		ldi r31,0
 213 0026 8081      		ld r24,Z
 214 0028 8160      		ori r24,lo8(1)
 215 002a 8083      		st Z,r24
  96:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     
  97:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     // initialize counter for TIMER 0 and TIMER 2 (p.108)
  98:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     TCNT0 = 0;
 217               	.LM16:
 218 002c 16BC      		out 0x26,__zero_reg__
  99:/Users/tedmyers/GitHub/learning-AVR/PWM/PWM/main.c ****     TCNT2 = 0;
 220               	.LM17:
 221 002e 1092 B200 		sts 178,__zero_reg__
 222 0032 0895      		ret
 224               	.Lscope2:
 226               	.Letext0:
 227               		.ident	"GCC: (GNU) 4.8.1"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//cc6xiOOx.s:2      *ABS*:0000003e __SP_H__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//cc6xiOOx.s:3      *ABS*:0000003d __SP_L__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//cc6xiOOx.s:4      *ABS*:0000003f __SREG__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//cc6xiOOx.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//cc6xiOOx.s:6      *ABS*:00000001 __zero_reg__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//cc6xiOOx.s:105    .text.startup:00000000 main
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//cc6xiOOx.s:172    .text:00000000 pwm_init

NO UNDEFINED SYMBOLS
