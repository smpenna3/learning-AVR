
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000170  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006f0  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c41  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001528  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000be  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000058  00000000  00000000  0000161a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pwm_init>:
  80:	84 b5       	in	r24, 0x24	; 36
  82:	83 60       	ori	r24, 0x03	; 3
  84:	84 bd       	out	0x24, r24	; 36
  86:	e0 eb       	ldi	r30, 0xB0	; 176
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	80 83       	st	Z, r24
  90:	84 b5       	in	r24, 0x24	; 36
  92:	80 6f       	ori	r24, 0xF0	; 240
  94:	84 bd       	out	0x24, r24	; 36
  96:	80 81       	ld	r24, Z
  98:	80 63       	ori	r24, 0x30	; 48
  9a:	80 83       	st	Z, r24
  9c:	85 b5       	in	r24, 0x25	; 37
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	85 bd       	out	0x25, r24	; 37
  a2:	e1 eb       	ldi	r30, 0xB1	; 177
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	80 83       	st	Z, r24
  ac:	16 bc       	out	0x26, r1	; 38
  ae:	10 92 b2 00 	sts	0x00B2, r1
  b2:	08 95       	ret

000000b4 <main>:
    
    // OC0A is tied to pin PD6 (pin 12 on 328 chip)
    // OC0B is tied to pin PD5 (pin 11 on 328 chip)
    // OC2B is tied to pin PD3 (pin 5 on 328 chip)
    // Set all three pins to output
    DDRD |= (1 << RED_PIN) | (1 << GREEN_PIN) | (1 << BLUE_PIN);
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	88 66       	ori	r24, 0x68	; 104
  b8:	8a b9       	out	0x0a, r24	; 10
    
    // Start all color channels off
    OCR0A = 255;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	87 bd       	out	0x27, r24	; 39
    OCR0B = 255;
  be:	88 bd       	out	0x28, r24	; 40
    OCR2B = 255;
  c0:	80 93 b4 00 	sts	0x00B4, r24
    
    while(1)
    {
        
        // fade green up
        for (int i = 0; i < 256; i++)
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	8f 3f       	cpi	r24, 0xFF	; 255
  ca:	91 05       	cpc	r25, r1
  cc:	09 f0       	breq	.+2      	; 0xd0 <main+0x1c>
  ce:	5c f4       	brge	.+22     	; 0xe6 <main+0x32>
        {
            OCR0A = (255-i);
  d0:	28 2f       	mov	r18, r24
  d2:	20 95       	com	r18
  d4:	27 bd       	out	0x27, r18	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	e7 e8       	ldi	r30, 0x87	; 135
  d8:	f3 e1       	ldi	r31, 0x13	; 19
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x26>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x2c>
  e0:	00 00       	nop
    
    while(1)
    {
        
        // fade green up
        for (int i = 0; i < 256; i++)
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	f1 cf       	rjmp	.-30     	; 0xc8 <main+0x14>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
            _delay_ms(delay_amount);
        }
        // fade green down
        for (int j = 255; j >= 0; j--)
        {
            OCR0A = (255-j);
  ea:	87 bd       	out	0x27, r24	; 39
  ec:	e7 e8       	ldi	r30, 0x87	; 135
  ee:	f3 e1       	ldi	r31, 0x13	; 19
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x3c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x42>
  f6:	00 00       	nop
  f8:	01 96       	adiw	r24, 0x01	; 1
        {
            OCR0A = (255-i);
            _delay_ms(delay_amount);
        }
        // fade green down
        for (int j = 255; j >= 0; j--)
  fa:	81 15       	cp	r24, r1
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	9f 07       	cpc	r25, r31
 100:	a1 f7       	brne	.-24     	; 0xea <main+0x36>
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	90 e0       	ldi	r25, 0x00	; 0
        
        
        //fade blue up
        for (int i = 0; i < 256; i++)
        {
            OCR0B = (255-i);
 106:	88 bd       	out	0x28, r24	; 40
 108:	e7 e8       	ldi	r30, 0x87	; 135
 10a:	f3 e1       	ldi	r31, 0x13	; 19
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x58>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x5e>
 112:	00 00       	nop
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	b8 f7       	brcc	.-18     	; 0x106 <main+0x52>
        }
        
        
        
        //fade blue up
        for (int i = 0; i < 256; i++)
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
            _delay_ms(delay_amount);
        }
        // fade blue down
        for (int j = 255; j >= 0; j--)
        {
            OCR0B = (255-j);
 11c:	88 bd       	out	0x28, r24	; 40
 11e:	e7 e8       	ldi	r30, 0x87	; 135
 120:	f3 e1       	ldi	r31, 0x13	; 19
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x6e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x74>
 128:	00 00       	nop
 12a:	01 96       	adiw	r24, 0x01	; 1
        {
            OCR0B = (255-i);
            _delay_ms(delay_amount);
        }
        // fade blue down
        for (int j = 255; j >= 0; j--)
 12c:	81 15       	cp	r24, r1
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	9f 07       	cpc	r25, r31
 132:	a1 f7       	brne	.-24     	; 0x11c <main+0x68>
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	90 e0       	ldi	r25, 0x00	; 0
        }
        
        //fade red up
        for (int i = 0; i < 256; i++)
        {
            OCR2B = (255-i);
 138:	80 93 b4 00 	sts	0x00B4, r24
 13c:	e7 e8       	ldi	r30, 0x87	; 135
 13e:	f3 e1       	ldi	r31, 0x13	; 19
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x8c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x92>
 146:	00 00       	nop
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	b0 f7       	brcc	.-20     	; 0x138 <main+0x84>
            OCR0B = (255-j);
            _delay_ms(delay_amount);
        }
        
        //fade red up
        for (int i = 0; i < 256; i++)
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
            _delay_ms(delay_amount);
        }
        // fade red down
        for (int j = 255; j >= 0; j--)
        {
            OCR2B = (255-j);
 150:	80 93 b4 00 	sts	0x00B4, r24
 154:	e7 e8       	ldi	r30, 0x87	; 135
 156:	f3 e1       	ldi	r31, 0x13	; 19
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0xa4>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0xaa>
 15e:	00 00       	nop
 160:	01 96       	adiw	r24, 0x01	; 1
        {
            OCR2B = (255-i);
            _delay_ms(delay_amount);
        }
        // fade red down
        for (int j = 255; j >= 0; j--)
 162:	81 15       	cp	r24, r1
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	9f 07       	cpc	r25, r31
 168:	99 f7       	brne	.-26     	; 0x150 <main+0x9c>
 16a:	ac cf       	rjmp	.-168    	; 0xc4 <main+0x10>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
