
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000e6  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000588  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c38  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00001330  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000be  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  0000140e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000058  00000000  00000000  00001422  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pwm_init>:
  80:	84 b5       	in	r24, 0x24	; 36
  82:	83 60       	ori	r24, 0x03	; 3
  84:	84 bd       	out	0x24, r24	; 36
  86:	e0 eb       	ldi	r30, 0xB0	; 176
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	80 83       	st	Z, r24
  90:	84 b5       	in	r24, 0x24	; 36
  92:	80 6f       	ori	r24, 0xF0	; 240
  94:	84 bd       	out	0x24, r24	; 36
  96:	80 81       	ld	r24, Z
  98:	80 63       	ori	r24, 0x30	; 48
  9a:	80 83       	st	Z, r24
  9c:	85 b5       	in	r24, 0x25	; 37
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	85 bd       	out	0x25, r24	; 37
  a2:	e1 eb       	ldi	r30, 0xB1	; 177
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	80 83       	st	Z, r24
  ac:	16 bc       	out	0x26, r1	; 38
  ae:	10 92 b2 00 	sts	0x00B2, r1
  b2:	08 95       	ret

000000b4 <main>:
    
    // OC0A is tied to pin PD6 (pin 12 on 328 chip)
    // OC0B is tied to pin PD5 (pin 11 on 328 chip)
    // OC2B is tied to pin PD3 (pin 5 on 328 chip)
    // Set all three pins to output
    DDRD |= (1 << PD6) | (1 << PD5) | (1 << PD3);
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	88 66       	ori	r24, 0x68	; 104
  b8:	8a b9       	out	0x0a, r24	; 10
    
    // Start all color channels off
    OCR0A = 255;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	87 bd       	out	0x27, r24	; 39
    OCR0B = 255;
  be:	88 bd       	out	0x28, r24	; 40
    OCR2B = 255;
  c0:	80 93 b4 00 	sts	0x00B4, r24
    int delay_amount = 20; // milliseconds to delay between changing PWM values
    
    while(1)
    {
        
        PORTD |= (1 << PD6);
  c4:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	89 ef       	ldi	r24, 0xF9	; 249
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x16>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x1c>
  d0:	00 00       	nop
        _delay_ms(1);
        PORTD &= ~(1 << PD6);
  d2:	5e 98       	cbi	0x0b, 6	; 11
  d4:	89 ec       	ldi	r24, 0xC9	; 201
  d6:	98 e0       	ldi	r25, 0x08	; 8
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x24>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x2a>
  de:	00 00       	nop
  e0:	f1 cf       	rjmp	.-30     	; 0xc4 <main+0x10>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
